terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "3.7"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

resource "aws_vpc" "vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "My VPC"
  }
}

resource "aws_subnet" "subnet1" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = "10.0.0.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "Public Subnet"
  }
}

# Public Subnet
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "My VPC - Internet Gateway"
  }
}

resource "aws_route_table" "pubroute" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "Public Subnet Route Table"
  }
}

resource "aws_route_table_association" "pubroute_assoc" {
  subnet_id      = aws_subnet.subnet1.id
  route_table_id = aws_route_table.pubroute.id
}

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh_sg"
  description = "Allow SSH inbound connections"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_ssh_sg"
  }
}

resource "aws_instance" "ec2" {
  ami                         = "ami-0947d2ba12ee1ff75"
  instance_type               = "t3.small"
  key_name                    = "use-1"
  vpc_security_group_ids      = [aws_security_group.allow_ssh.id]
  subnet_id                   = aws_subnet.subnet1.id
  associate_public_ip_address = true

  tags = {
    Name = "JIRA Demo"
  }
}

output "instance_public_ip" {
  value = aws_instance.ec2.public_ip
}


# Nat Gateway
resource "aws_subnet" "nated" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "Nat-ed Subnet"
  }
}

resource "aws_eip" "nat_gw_eip" {
  vpc = true
}

resource "aws_nat_gateway" "ngw" {
  allocation_id = aws_eip.nat_gw_eip.id
  subnet_id     = aws_subnet.subnet1.id
}

resource "aws_route_table" "natroute" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.ngw.id
  }

  tags = {
    Name = "NAT-ed Subnet Route Table"
  }
}

resource "aws_route_table_association" "natroute_assoc" {
  subnet_id      = aws_subnet.nated.id
  route_table_id = aws_route_table.natroute.id
}

# Private Subnet
resource "aws_subnet" "subnet2" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "Private Subnet"
  }
}

resource "aws_route_table" "priroute" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "Private Subnet Route Table"
  }
}

resource "aws_route_table_association" "priroute_assoc" {
  subnet_id      = aws_subnet.subnet2.id
  route_table_id = aws_route_table.priroute.id
}


# Create DB instance

resource "aws_db_subnet_group" "dbsubnet" {
  name = "main"
  subnet_ids = [aws_subnet.nated.id, aws_subnet.subnet2.id]
}

resource "aws_db_instance" "dbinst" {
  identifier     = "dbpost1"
  instance_class = "db.t3.small"
  allocated_storage = 10
  engine = "postgresql"
  engine_version = "10.14"
  name = "mydb"
  username ="postgres"
  password = "password"
  skip_final_snapshot = true
  multi_az = "false"
  db_subnet_group_name = aws_db_subnet_group.dbsubnet.name
}